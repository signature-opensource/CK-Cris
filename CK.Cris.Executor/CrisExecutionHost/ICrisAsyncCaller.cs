using CK.Core;
using System.Threading.Tasks;

namespace CK.Cris
{
    /// <summary>
    /// A caller viewed by a <see cref="CrisExecutionHost"/>.
    /// </summary>
    /// <typeparam name="TCallerInfo">The endpoint scope data type (see <see cref="EndpointDefinition{TScopeData}"/>).</typeparam>
    public interface ICrisAsyncCaller<TCallerInfo> where TCallerInfo : notnull
    {
        /// <summary>
        /// Must send the validation result back to the caller.
        /// If <see cref="CrisValidationResult.Success"/> is false, the job handling is terminated.
        /// </summary>
        /// <param name="monitor">The monitor to use.</param>
        /// <param name="job">The handled job.</param>
        /// <param name="validationResult">The validation result.</param>
        void ReturnCrisValidationResult( IActivityMonitor monitor, CrisJob<TCallerInfo> job, CrisValidationResult validationResult );

        /// <summary>
        /// Must send the event back to the caller (and may be to other parties).
        /// </summary>
        /// <param name="monitor">The monitor to use.</param>
        /// <param name="callerInfo">The caller specific information.</param>
        /// <param name="e">The event generated by the current request handling.</param>
        Task ReturnEventAsync( IActivityMonitor monitor, TCallerInfo callerInfo, IEvent e );

        /// <summary>
        /// Must send the final result back to the caller.
        /// </summary>
        /// <param name="monitor">The monitor to use.</param>
        /// <param name="job">The handled job.</param>
        /// <param name="result">The result.</param>
        void ReturnCommandResult( IActivityMonitor monitor, CrisJob<TCallerInfo> job, CrisExecutionHost.ICrisJobResult? result );
    }
}
